Promp 1) Create a restaurant. You will have customers come into the restaurant. The restaurant has three
waiters that wait on 5 different tables. There is one chef. The waiters seat the customer, take the order,
bring the order to the chef, and then bring the food to the customer once it is ready. The customers eat and 
then leave the restaurant. Use interface/abstract to design this. You should use at least one generic method 
or class, and use multi-threading to do this. Show how this runs with customers eating for random amounts of time. 

What I need:
I choosed interface over abstract, so I went with the runnable multi-threading way
We will have two interfaces:
    interface1: customer
        eats()
        leaves()
    interface2: waiter
        seatsCust()
        takesOrder()
        bringsOrder()
        bringsFood()
(Original plan) Professor said to use arrays of threads, will help with the 3 waiters problem
Tried making these but it will take a lot of time which I don't have, (need to study for the final), will go with plan b, create multiple classes
String[] waiters = new String[4];
        for(int i=1; i<waiters.length; i++) {
            System.out.println("Waiter "+i);
        }

Plan b: Add two more waiter classes, this will have their names. 
Add two more runnable classes (or threads) I will be able to change the milliseconds.
Add synchronization which includes, wait() and notify() so the code runs smoothly


The output: 
it should look like this, implemented in multi-threading 
{ One example
    waiterOne seats a customer on tableOne
    waiterOne takes an order 
    waiterOne brings order to the chef 
    waiterOne brings food to the customer
    customer eats 
    customer leaves 
} 

{ Second example 
    waiterTwo seats a customer on tableTwo
    waiterTwo takes an order 
    waiterTwo brings order to the chef 
    waiterTwo brings food to the customer
    customer eats 
    customer leaves
}

